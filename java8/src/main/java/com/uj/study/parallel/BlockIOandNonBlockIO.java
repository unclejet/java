package com.uj.study.parallel;

/**
 * @author ：UncleJet
 * @date ：Created in 2020/12/17 上午11:51
 * @description：假设要编写一个支持大量用户的聊天程序。每当用户连接到聊天服务器时,都要和服务器
 * 建立一个 TCP 连接。使用传统的线程模型,每次向用户写数据时,都要调用一个方法向用
 * 户传输数据,这个方法会阻塞当前线程。
 * 这种 I/O 方式叫阻塞式 I/O,是一种通用且易于理解的方式,因为和程序用户的交互通常
 * 符合这样一种顺序执行的方式。缺点是,将系统扩展至支持大量用户时,需要和服务器建
 * 立大量 TCP 连接,因此扩展性不是很好。
 * 非阻塞式 I/O,有时也叫异步 I/O,可以处理大量并发网络连接,而且一个线程可以为多
 * 个连接服务。和阻塞式 I/O 不同,对聊天程序客户端的读写调用立即返回,真正的读写操
 * 作则在另一个独立的线程执行,这样就可以同时执行其他任务了。如何使用这些省下来的
 * CPU 周期完全取决于程序员,可以选择读入更多数据,也可以玩一局 Minecraft 游戏。
 */
public class BlockIOandNonBlockIO {
}
